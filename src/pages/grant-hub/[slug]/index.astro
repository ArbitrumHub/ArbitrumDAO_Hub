---
import Card from "@/components/grant-hub/card.astro";
import Features from "@/components/grant-hub/features.astro";
import GradientHead from "@/components/ui/gradient-head.astro";
import Seperator from "@/components/ui/seperator.astro";
import { GrantHub_Homepage } from "@/consts";
import MainLayout from "@/layouts/MainLayout.astro";
import { paragraphCva, titleCva } from "@/lib/cvas";
import type { PaginateFunction } from "astro";
import { getCollection } from "astro:content";
import Paginate from "@/components/ui/paginate.astro";
import RoundedNav from "@/components/ui/nav/rounded-nav.astro";
import RoundedNavWrapper from "@/components/grant-hub/rounded-nav-wrapper.astro";
import Button from "@/components/ui/button.astro";
import { fundedGrants } from "@/data/links/grant-hub";
import { proseClasses } from "@/lib/classes";

export async function getStaticPaths() {
  const data = await getCollection("Grant_Hub");
  const homes = data.filter((d) => d.data.type === "Home");

  return (
    homes?.map((page) => {
      const allPosts = data.filter(
        (d) =>
          d.data.type === "Grant" &&
          d.slug.split("/")[0] === page.slug &&
          !d.data.subCollection,
      );

      return {
        params: { slug: page.slug },
        props: {
          ...page,
          allPosts: allPosts,
        },
      };
    }) ?? []
  );
}

const { data, slug, render, allPosts } = Astro.props;

const { Content } = await render();

const pathname = Astro.url.pathname;

let nav = fundedGrants(pathname, slug);
const button = {
  text:
    nav?.[1]?.title === "Accepted Projects" ? "View Projects" : "View Grants",
  link: `/grant-hub/${slug}/grants/`,
  type: "default",
};

console.log(!data?.grants?.title && !data?.update?.title);

if (!data?.grants?.title && !data?.update?.title) {
  nav = nav?.map((n, i) => ({ ...n, disabled: i !== 0 ? true : false }));
}

if (data?.grants?.title && !data?.update?.title) {
  nav = nav?.map((n, i) => ({
    ...n,
    disabled: i === 2 ? true : false,
  }));
}

if (!data?.grants?.title && data?.update?.title) {
  nav = nav?.map((n, i) => ({
    ...n,
    disabled: i === 1 ? true : false,
  }));
}

console.log(nav);
---

<MainLayout
  image="/meta/grant.png"
  title={data.title}
  description={data.description}
>
  <RoundedNavWrapper nav={nav}>
    <GradientHead
      title={data.title}
      description={data.description}
      buttons={data?.buttons && data?.grants?.title
        ? ([button, ...data?.buttons] as any)
        : data?.grants?.title
          ? [button]
          : data?.buttons}
      breadcrumbs={[
        { text: "Grant Hub", link: "/grant-hub#grand-programs" },
        {
          text: data.title,
          link: `/grant-hub/${slug}/`,
        },
      ]}
    />
  </RoundedNavWrapper>
  <Seperator />
  <article class={proseClasses}>
    <Content />
  </article>
</MainLayout>

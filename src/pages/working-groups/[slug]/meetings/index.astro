---
import GradientHead from "@/components/ui/gradient-head.astro";
import RoundedNav from "@/components/ui/nav/rounded-nav.astro";
import Seperator from "@/components/ui/seperator.astro";
import MainWrapper from "@/components/working-groups/Main-Wrapper.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { getCollection } from "astro:content";
import Meet from "@/components/calenders/Meetings2";
import Calendar from "@/components/community-hub/calendar.astro";
// import Meetings from "@/components/calenders/Meetings";
export async function getStaticPaths() {
  const groups = await getCollection("Working_Groups");
  const wb = groups.filter((group) => group.data.type === "wg");
  const meetings = groups.filter(
    (group) => group.data.type === "notes" || group.data.type === "transcript",
  );

  const filteredMeetingsByRecording = meetings.filter((meeting) => {
    return meeting.data.recordingUrl;
  });

  //only take one from each slug link slug/name

  const deleteDuplicateMeeting = filteredMeetingsByRecording.filter(
    (meeting, index, self) => {
      return (
        index ===
        self.findIndex(
          (t) => t.slug.split("/")[2] === meeting.slug.split("/")[2],
        )
      );
    },
  );
  return wb.map((group) => {
    const currentMeetings = deleteDuplicateMeeting.filter(
      (meeting) => meeting.slug.split("/")[0] === group.slug.split("/")[0],
    );
    return {
      params: {
        slug: group.slug,
      },
      props: { group, meetings: currentMeetings },
    };
  });
}

const {
  group: { data, slug, render },
  meetings,
} = Astro.props;

console.log(meetings);
---

<MainWrapper
  breadcrumbs={[{ text: "Meetings", link: `/working-groups/${slug}/meetings` }]}
  data={data}
  slug={slug}
  className="border-none"
>
  <section class="flex flex-col gap-5 md:gap-10">
    <Calendar />
    <Meet
      meetings={meetings}
      client:load
      type={data.title}
      calendarId={data.calendarId}
    />
  </section>
</MainWrapper>

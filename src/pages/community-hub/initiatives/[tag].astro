---
import Events from "@/components/community-hub/Events";
import MainWrapper from "@/components/community-hub/head/community-head.astro";

import RoundedNav from "@/components/ui/nav/rounded-nav.astro";
import Seperator from "@/components/ui/seperator.astro";
import { Events_HomePage } from "@/consts";
import { eventsNav } from "@/data/links/community-hub";
import MainLayout from "@/layouts/MainLayout.astro";
import { getCollection } from "astro:content";
//  CollectionEntry<'events'>

export async function getStaticPaths() {
  const entries = await getCollection("Community_Events");
  const tags = entries.map((entry) => entry?.data?.type);
  const uniqueTags = [...new Set(tags)];
  return uniqueTags.map((entry) => {
    return {
      params: { tag: entry },
      props: {
        entry,
        events: entries.filter((event) => event?.data?.type === entry),
      },
    };
  });
}

const { events, entry } = Astro.props;
console.log(events, entry);
const { tag } = Astro.params;
console.log(tag);

const pathname = Astro.url.pathname;

const sortedEvents = events?.sort((a, b) => {
  if (!a?.data?.date || !b?.data?.date) return 0;
  const aDate = a?.data?.date;
  const bDate = b?.data?.date;
  return aDate.getTime() - bDate.getTime();
});

// const eventsByMonth: {
//   [key: string]: CollectionEntry<"Community_Events">[];
// } = sortedEvents?.reduce((acc: any, event) => {
//   const month =
//     event?.data?.date?.toLocaleString("default", {
//       month: "long",
//     }) ?? "Unknown";
//   if (!acc[month]) {
//     acc[month] = [];
//   }
//   acc[month].push(event);
//   return acc;
// }, {});
---

<MainLayout
  image="/meta/hub/comm-3.png"
  title={Events_HomePage.title}
  description={Events_HomePage.description}
>
  <MainWrapper
    title={Events_HomePage.title}
    description={Events_HomePage.description}
  />

  <Seperator />
  <!-- <section class="flex flex-col gap-4 py-5 lg:py-10" id="sub">
    <RoundedNav
      className="w-[70%] md:w-[50%]"
      nav={eventsNav?.map((tag) => {
        return {
          title: tag.label,
          slug: `${tag.link}#sub`,
          match: tag.link === pathname,
        };
      })}
      variant="children"
    />
    <div class="grid gap-6 md:grid-cols-2 md:gap-5 lg:grid-cols-3">
      {
        sortedEvents.map(({ data, slug }) => {
          return (
            <BlogCard
              type="event"
              blog={data}
              link={`/community-hub/initiatives/${slug}`}
              defaultImage={
                tag === "hackathon" ? "/default/hackathons.png" : undefined
              }
            />
          );
        })
      }
    </div>
  </section> -->
  <Events client:load sortedEvents={sortedEvents} tag={tag}>
    <RoundedNav
      className="w-[70%] md:w-[50%]"
      nav={eventsNav?.map((tag) => {
        return {
          title: tag.label,
          slug: `${tag.link}#sub`,
          match: tag.link === pathname,
        };
      })}
      variant="children"
    />
  </Events>
  <Seperator />
</MainLayout>
